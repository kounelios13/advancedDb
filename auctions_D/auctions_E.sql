-- 1. Εκτυπώστε τα είδη των έργων στα οποία εξειδικεύεται ο εμπειρογνώμονας με ψευδώνυμο της αρεσκείας σας
WITH RECURSIVE ARTWORKINTEREST AS (
    SELECT NODEKEY1,
           NODEKEY2,
           PROPERTYLABEL
    FROM NORMALIZEDPROPERTYLINK
    WHERE NODEKEY1 = 'marcelo97'
      AND PROPERTYLABEL = 'interest'
    UNION
    SELECT N.NODEKEY1,
           N.NODEKEY2,
           N.PROPERTYLABEL
    FROM NORMALIZEDPROPERTYLINK N
             INNER JOIN ARTWORKINTEREST A ON A.NODEKEY1 = N.NODEKEY1
    where N.PROPERTYLABEL = A.PROPERTYLABEL
)
SELECT *
FROM ARTWORKINTEREST;

-- 2. Για κάθε / ένα κόμβο υπολογίστε τους επόμενους (σε μια κατεύθυνση της επιλογής σας)
WITH RECURSIVE FIND_NEXT_NODES AS (
    SELECT NODEKEY1, PROPERTYLABEL, NODEKEY2
    FROM NORMALIZEDPROPERTYLINK N
    WHERE PROPERTYLABEL = 'follows'
    UNION
    SELECT N.NODEKEY1, N.PROPERTYLABEL, N.NODEKEY2
    FROM NORMALIZEDPROPERTYLINK N
             INNER JOIN FIND_NEXT_NODES F ON N.NODEKEY1 = F.NODEKEY2 AND N.PROPERTYLABEL = F.PROPERTYLABEL
)
SELECT *
FROM FIND_NEXT_NODES;

-- 3. Για κάθε / ένα κόμβο υπολογίστε τους προηγούμενους (σε μια κατεύθυνση της επιλογής σας)
WITH RECURSIVE FIND_NEXT_NODES (NODEKEY1, PROPERTYLABEL, NODEKEY2) AS (
    SELECT NODEKEY1, PROPERTYLABEL, NODEKEY2
    FROM NORMALIZEDPROPERTYLINK N
    WHERE PROPERTYLABEL = 'follows'
    UNION
    SELECT N.NODEKEY1, N.PROPERTYLABEL, N.NODEKEY2
    FROM NORMALIZEDPROPERTYLINK N
             INNER JOIN FIND_NEXT_NODES F ON N.NODEKEY2 = F.NODEKEY1 AND N.PROPERTYLABEL = F.PROPERTYLABEL
)
SELECT *
FROM FIND_NEXT_NODES;

-- 4. Για κάθε / ένα κόμβο υπολογίστε τους επόμενους ανεξαρτήτως κατεύθυνσης
WITH RECURSIVE TRANSITIVE_CLOSURE(NODEKEY1, NODEKEY2, DISTANCE, PATH_STRING) AS (
    SELECT NODEKEY1,
           NODEKEY2,
           1                            AS DISTANCE,
           NODEKEY1 || '->' || NODEKEY2 AS PATH_STRING
    FROM NORMALIZEDPROPERTYLINK
    UNION ALL
    SELECT TC.NODEKEY1,
           E.NODEKEY2,
           TC.DISTANCE + 1,
           TC.PATH_STRING || '->' || E.NODEKEY2 AS PATH_STRING
    FROM NORMALIZEDPROPERTYLINK AS E
             JOIN TRANSITIVE_CLOSURE AS TC
                  ON E.NODEKEY1 = TC.NODEKEY2
    WHERE TC.PATH_STRING NOT LIKE '%' || E.NODEKEY2 || '%'
)
SELECT *
FROM TRANSITIVE_CLOSURE
ORDER BY NODEKEY1, NODEKEY2, DISTANCE;
-- 5. Για κάθε / ένα κόμβο υπολογίστε τους προηγούμενους ανεξαρτήτως κατεύθυνσης
WITH RECURSIVE TRANSITIVE_CLOSURE(NODEKEY1, NODEKEY2, DISTANCE, PATH_STRING) AS (
    SELECT NODEKEY1,
           NODEKEY2,
           1                            AS DISTANCE,
           NODEKEY2 || '<-' || NODEKEY1 AS PATH_STRING
    FROM NORMALIZEDPROPERTYLINK
    UNION ALL
    SELECT TC.NODEKEY1,
           E.NODEKEY2,
           TC.DISTANCE + 1,
           TC.PATH_STRING || '<-' || E.NODEKEY1 AS PATH_STRING
    FROM NORMALIZEDPROPERTYLINK AS E
             JOIN TRANSITIVE_CLOSURE AS TC
                  ON E.NODEKEY2 = TC.NODEKEY1
    WHERE TC.PATH_STRING NOT LIKE '%' || E.NODEKEY1 || '%'
)
SELECT *
FROM TRANSITIVE_CLOSURE
ORDER BY NODEKEY1, NODEKEY2, DISTANCE;

-- 6. Υπολογίστε όλες τις πιθανές διαδρομές που συνδέουν τους καταγεγραμμένους χρήστες συλλέκτες στο property graph που υλοποιήσατε στο Part D
WITH RECURSIVE FIND_ALL_FOLLOWERS_PATH(NODEKEY1, NODEKEY2, PROPERTYLABEL, PATH) AS (
    SELECT P.NODEKEY1, P.NODEKEY2, PROPERTYLABEL, P.NODEKEY1 || '->' || P.NODEKEY2 AS PATH
    FROM NORMALIZEDPROPERTYLINK P
    UNION ALL
    SELECT A.NODEKEY1, P.NODEKEY2, P.PROPERTYLABEL, A.PATH || '->' || P.NODEKEY2 AS PATH
    FROM NORMALIZEDPROPERTYLINK P
             INNER JOIN FIND_ALL_FOLLOWERS_PATH A ON A.NODEKEY2 = P.NODEKEY1
    WHERE A.PATH NOT LIKE '%' || P.NODEKEY2 || '->%'
)
SELECT *
FROM FIND_ALL_FOLLOWERS_PATH A
WHERE A.PROPERTYLABEL = 'follows'
ORDER BY A.NODEKEY1;

-- 7. Για δύο συγκεκριμένους κόμβους που συνδέονται σε μια διαδρομή υπολογίστε την απόσταση σε κόμβους στη διαδρομή
WITH RECURSIVE FIND_DISTANCE_OF_TWO_NODES(NODEKEY1, NODEKEY2, DISTANCE, PATH_STRING) AS (
    SELECT NODEKEY1,
           NODEKEY2,
           1                            AS DISTANCE,
           NODEKEY1 || '->' || NODEKEY2 AS PATH_STRING
    FROM NORMALIZEDPROPERTYLINK
    UNION ALL
    SELECT F.NODEKEY1,
           E.NODEKEY2,
           F.DISTANCE + 1,
           F.PATH_STRING || '->' || E.NODEKEY2 AS PATH_STRING
    FROM NORMALIZEDPROPERTYLINK AS E
             JOIN FIND_DISTANCE_OF_TWO_NODES AS F
                  ON E.NODEKEY1 = F.NODEKEY2
    WHERE F.PATH_STRING NOT LIKE '%' || E.NODEKEY2 || '%'
)
SELECT *
FROM FIND_DISTANCE_OF_TWO_NODES
WHERE NODEKEY1 = 'john'
  AND NODEKEY2 = 'mitsos13'
ORDER BY NODEKEY1;

-- 8. Για δύο συλλέκτες που συμμετέχουν στην ίδια δημοπρασία της αρεσκείας σας, υπολόγισε όλα τα εκθέματα κοινού ενδιαφέροντος που εκτίθενται στη δημοπρασία